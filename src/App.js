import React from 'react';
import './index.scss';

const questions = [
  {
    title: 'React - —ç—Ç–æ ... ?',
    variants: ['–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'],
    correct: 0,
  },
  {
    title: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç - —ç—Ç–æ ... ',
    variants: ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', '—Ç–æ, —á—Ç–æ —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç–∞–∫–æ–µ'],
    correct: 1,
  },
  {
    title: '–ß—Ç–æ —Ç–∞–∫–æ–µ JSX?',
    variants: [
      '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π HTML',
      '–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è',
      '–≠—Ç–æ —Ç–æ—Ç –∂–µ HTML, –Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω—è—Ç—å JS-–∫–æ–¥',
    ],
    correct: 2,
  },
];

function Result({ setStep, correct, setCorrect }) {
  const resultsToZero = () => {
    setStep(0);
    setCorrect(0);
  };
  return (
    <div className="result">
      <img src="https://cdn-icons-png.flaticon.com/512/2278/2278992.png" />
      <h2>{`–í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ ${correct} –æ—Ç–≤–µ—Ç–∞ –∏–∑ 10`}</h2>
      <button onClick={resultsToZero}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
    </div>
  );
}

function Game({ step, question, onClickVariant }) {
  const persentage = Math.round((step / questions.length) * 100);

  return (
    <>
      <div className="progress">
        <div style={{ width: `${persentage}%` }} className="progress__inner"></div>
      </div>
      <h1>{question.title}</h1>
      <ul>
        {question.variants.map((variant, index) => (
          <li onClick={() => onClickVariant(index)} key={index}>
            {variant}
          </li>
        ))}
      </ul>
    </>
  );
}

function App() {
  const [step, setStep] = React.useState(0);
  const [correct, setCorrect] = React.useState(0);

  const question = questions[step];

  const onClickVariant = (index) => {
    console.log('üöÄ ~ file: App.js:63 ~ onClickVariant ~ index', index);
    console.log(question);
    setStep(step + 1);
    if (index == question.correct) {
      setCorrect(correct + 1);
    }
  };

  return (
    <div className="App">
      {step !== questions.length ? (
        <Game step={step} question={question} onClickVariant={onClickVariant} />
      ) : (
        <Result setStep={setStep} correct={correct} setCorrect={setCorrect} />
      )}
    </div>
  );
}

export default App;
